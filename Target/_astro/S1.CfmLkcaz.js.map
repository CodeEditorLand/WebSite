{"version":3,"file":"S1.CfmLkcaz.js","sources":["../../Source/Script/Pages/Index/S1.frag?raw"],"sourcesContent":["export default \"uniform float time;\\nuniform float gradientAngle;\\nvarying vec2 vUv;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\t// Flipped UV calculation for efficiency\\n\\tvec2 modifiedUv = vec2(vUv.x, 1.0f - vUv.y); \\n\\n\\t// Pre-calculate common values\\n\\tvec2 center = vec2(0.5f);\\n\\tfloat distanceToCenter = distance(modifiedUv, center);\\n\\n\\t// Define colors with vec3 for conciseness\\n\\t// (alpha is separate for clarity) \\n\\tvec3 hotColor1 = vec3(1.0f, 69.0f / 255.0f, 0.0f);\\n\\tvec3 hotColor2 = vec3(139.0f / 255.0f, 0.0f, 0.0f);\\n\\tvec3 hotColor3 = vec3(0.0f, 0.0f, 0.0f);\\n\\n\\tvec3 coldColor1 = vec3(0.0f, 100.0f / 255.0f, 1.0f);\\n\\tvec3 coldColor2 = vec3(0.0f, 0.0f, 139.0f / 255.0f);\\n\\tvec3 coldColor3 = vec3(0.0f, 0.0f, 0.0f);\\n\\n\\t// Remove unused hotColdMix (replaced by gradientFactor)\\n\\n\\t// Gradient direction calculation\\n\\tvec2 direction = vec2(cos(gradientAngle), sin(gradientAngle));\\n\\tfloat gradientFactor = dot(normalize(modifiedUv - center), direction) * 0.5f + 0.5f;\\n\\n\\t// Optimized gradient calculations\\n\\tvec3 hotGradient = mix(mix(hotColor1, hotColor2, smoothstep(0.0f, 0.21f, distanceToCenter)), hotColor3, smoothstep(0.21f, 1.0f, distanceToCenter));\\n\\n\\tvec3 coldGradient = mix(mix(coldColor1, coldColor2, smoothstep(0.0f, 0.21f, distanceToCenter)), coldColor3, smoothstep(0.21f, 1.0f, distanceToCenter));\\n\\n\\tvec3 radialGradient = mix(coldGradient, hotGradient, gradientFactor); \\n\\n\\t// Effect calculations\\n\\tfloat effectSize = 0.021f;\\n\\tfloat effectDistance = mod(modifiedUv.y + time, effectSize) - effectSize;\\n\\tfloat effectIntensity = 0.021f * smoothstep(effectSize, 0.0f, abs(effectDistance));\\n\\n\\tvec3 hotEffectColor = vec3(1.0f, 69.0f / 255.0f, 0.0f);\\n\\tvec3 coldEffectColor = vec3(0.0f, 191.0f / 255.0f, 1.0f);\\n\\tvec3 effectColor = mix(coldEffectColor, hotEffectColor, gradientFactor); // Use gradientFactor \\n\\n\\tradialGradient = mix(radialGradient, effectColor, effectIntensity); \\n\\n\\t// Combine color and opacity at the end\\n\\tgl_FragColor = vec4(radialGradient, mix(1.0f, 0.21f, sin(time) * 0.00021f + 0.21f));\\n}\\n\""],"names":["S1"],"mappings":"AAAA,MAAeA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}