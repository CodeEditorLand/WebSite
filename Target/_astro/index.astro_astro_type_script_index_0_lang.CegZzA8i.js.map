{"version":3,"mappings":"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","names":["Fragment","Vertex","_Scene","PerspectiveCamera","WebGLRenderer","Group","Mesh","ConeGeometry","MeshPhysicalMaterial","PCFSoftShadowMap","AmbientLight","DirectionalLight","ACESFilmicToneMapping","SphereGeometry","ShaderMaterial","DoubleSide","RGBAFormat","FloatType","CubeCamera","WebGLCubeRenderTarget","__vitePreload","Scene","Camera","Renderer","Pyramid","Burn","Camera_Burn","Fn","Search","Positon","Material_Burn","Render_Burn","How","Side","Base","Top","Inner","See","Move"],"ignoreList":[],"sources":["../../Source/Script/Pages/Index/Fragment.frag?raw","../../Source/Script/Pages/Index/Vertex.glsl?raw","../../Source/Script/Pages/Index.ts"],"sourcesContent":["export default \"uniform float time;\\nuniform float gradientAngle;\\nvarying vec2 vUv;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\t// Flipped UV calculation for efficiency\\n\\tvec2 modifiedUv = vec2(vUv.x, 1.0f - vUv.y); \\n\\n\\t// Pre-calculate common values\\n\\tvec2 center = vec2(0.5f);\\n\\tfloat distanceToCenter = distance(modifiedUv, center);\\n\\n\\t// Define colors with vec3 for conciseness\\n\\t// (alpha is separate for clarity) \\n\\tvec3 hotColor1 = vec3(1.0f, 69.0f / 255.0f, 0.0f);\\n\\tvec3 hotColor2 = vec3(139.0f / 255.0f, 0.0f, 0.0f);\\n\\tvec3 hotColor3 = vec3(0.0f, 0.0f, 0.0f);\\n\\n\\tvec3 coldColor1 = vec3(0.0f, 100.0f / 255.0f, 1.0f);\\n\\tvec3 coldColor2 = vec3(0.0f, 0.0f, 139.0f / 255.0f);\\n\\tvec3 coldColor3 = vec3(0.0f, 0.0f, 0.0f);\\n\\n\\t// Remove unused hotColdMix (replaced by gradientFactor)\\n\\n\\t// Gradient direction calculation\\n\\tvec2 direction = vec2(cos(gradientAngle), sin(gradientAngle));\\n\\tfloat gradientFactor = dot(normalize(modifiedUv - center), direction) * 0.5f + 0.5f;\\n\\n\\t// Optimized gradient calculations\\n\\tvec3 hotGradient = mix(mix(hotColor1, hotColor2, smoothstep(0.0f, 0.21f, distanceToCenter)), hotColor3, smoothstep(0.21f, 1.0f, distanceToCenter));\\n\\n\\tvec3 coldGradient = mix(mix(coldColor1, coldColor2, smoothstep(0.0f, 0.21f, distanceToCenter)), coldColor3, smoothstep(0.21f, 1.0f, distanceToCenter));\\n\\n\\tvec3 radialGradient = mix(coldGradient, hotGradient, gradientFactor); \\n\\n\\t// Effect calculations\\n\\tfloat effectSize = 0.021f;\\n\\tfloat effectDistance = mod(modifiedUv.y + time, effectSize) - effectSize;\\n\\tfloat effectIntensity = 0.021f * smoothstep(effectSize, 0.0f, abs(effectDistance));\\n\\n\\tvec3 hotEffectColor = vec3(1.0f, 69.0f / 255.0f, 0.0f);\\n\\tvec3 coldEffectColor = vec3(0.0f, 191.0f / 255.0f, 1.0f);\\n\\tvec3 effectColor = mix(coldEffectColor, hotEffectColor, gradientFactor); // Use gradientFactor \\n\\n\\tradialGradient = mix(radialGradient, effectColor, effectIntensity); \\n\\n\\t// Combine color and opacity at the end\\n\\tgl_FragColor = vec4(radialGradient, mix(1.0f, 0.21f, sin(time) * 0.00021f + 0.21f));\\n}\\n\"","export default \"varying vec2 vUv;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\tvUv = uv;\\n\\tvNormal = normalize(normalMatrix * normal);\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n\"","import Fragment from \"@Script/Pages/Index/Fragment.frag?raw\";\nimport Vertex from \"@Script/Pages/Index/Vertex.glsl?raw\";\n\nexport const {\n\tScene: _Scene,\n\tPerspectiveCamera,\n\tWebGLRenderer,\n\tGroup,\n\tMesh,\n\tConeGeometry,\n\tMeshPhysicalMaterial,\n\tPCFSoftShadowMap,\n\tAmbientLight,\n\tDirectionalLight,\n\tACESFilmicToneMapping,\n\tSphereGeometry,\n\tShaderMaterial,\n\tDoubleSide,\n\tRGBAFormat,\n\tFloatType,\n\tCubeCamera,\n\tWebGLCubeRenderTarget,\n} = await import(\"three\");\n\n// @ts-ignore\nlet Scene, Camera, Renderer, Pyramid, Burn, Camera_Burn;\n\nfunction Fn() {\n\tScene = new _Scene();\n\n\tconst Search = new URLSearchParams(document.location.search).get(\"fov\");\n\n\tCamera = new PerspectiveCamera(\n\t\tSearch ? Number(Search) : 2.1,\n\t\twindow.innerWidth / window.innerHeight,\n\t\t0.0021,\n\t\t2100,\n\t);\n\n\t// Renderer\n\tRenderer = new WebGLRenderer({\n\t\tantialias: true,\n\t\talpha: true,\n\t\tprecision: \"highp\",\n\t\tpowerPreference: \"high-performance\",\n\t});\n\n\tRenderer.setPixelRatio(window.devicePixelRatio);\n\n\tRenderer.setSize(window.innerWidth, window.innerHeight);\n\n\tRenderer.shadowMap.enabled = true;\n\n\tRenderer.shadowMap.type = PCFSoftShadowMap;\n\n\tRenderer.toneMapping = ACESFilmicToneMapping;\n\n\tconst Positon = document.getElementById(\"Position\");\n\n\tPositon?.appendChild(Renderer.domElement);\n\n\t// Burn\n\tconst Material_Burn = new ShaderMaterial({\n\t\tuniforms: {\n\t\t\ttime: { value: 0.0 },\n\t\t},\n\t\tvertexShader: Vertex,\n\t\tfragmentShader: Fragment,\n\t\tside: DoubleSide,\n\t\ttransparent: true,\n\t});\n\n\tBurn = new Mesh(new SphereGeometry(21, 21, 21), Material_Burn);\n\n\tScene.add(Burn);\n\n\tconst Render_Burn = new WebGLCubeRenderTarget(512, {\n\t\tformat: RGBAFormat,\n\t\ttype: FloatType,\n\t});\n\n\tCamera_Burn = new CubeCamera(2.1, 2100, Render_Burn);\n\n\t// Pyramid\n\tPyramid = new Group();\n\n\tconst How = 2.1;\n\tconst Side = 3;\n\tconst Base = (Math.sqrt(Side) / Side) * How;\n\tconst Top = Math.sqrt(How / Side) * How;\n\n\t// Inner\n\tconst Inner = new Mesh(\n\t\tnew ConeGeometry(Base, Top, Side),\n\t\tnew MeshPhysicalMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\tmetalness: 0.0021,\n\t\t\troughness: 0.0021,\n\t\t\tclearcoat: 0.0021,\n\t\t\tclearcoatRoughness: 0.0021,\n\t\t\treflectivity: 0.0021,\n\t\t\tenvMap: Render_Burn.texture,\n\t\t\tenvMapIntensity: 0.0021,\n\t\t}),\n\t).translateY(-Base / How);\n\n\tInner.castShadow = true;\n\n\tInner.receiveShadow = true;\n\n\tPyramid.add(Inner);\n\n\tScene.add(Pyramid);\n\n\t// Light\n\tScene.add(new AmbientLight(0xffffff, 1.21));\n\n\tconst See = new DirectionalLight(0xffffff, 1.21);\n\n\tSee.position.set(0, -Base / How, Base * How);\n\n\tSee.castShadow = true;\n\n\tSee.shadow.camera.near = 0.0021;\n\n\tSee.receiveShadow = true;\n\n\tSee.shadow.camera.far = 2100;\n\n\tScene.add(See);\n\n\t// Movement\n\tCamera.position.set(-Base / How, -Base / How, Base * How);\n\n\tBurn.position.set(-Base / How, -Base / How, Base * How);\n\n\tPositon?.classList.add(\"Visible\");\n\n\tMove();\n}\n\nfunction Move() {\n\trequestAnimationFrame(Move);\n\n\tPyramid.rotation.x -= 0.00021;\n\n\tBurn.material.uniforms.time.value = performance.now() / 1021000;\n\n\tCamera_Burn.position.copy(Burn.position);\n\tCamera_Burn.update(Renderer, Scene);\n\n\tRenderer.render(Scene, Camera);\n}\n\nFn();\n\nwindow.addEventListener(\n\t\"resize\",\n\tfunction () {\n\t\tCamera.aspect = window.innerWidth / window.innerHeight;\n\n\t\tCamera.updateProjectionMatrix();\n\n\t\tRenderer.setSize(window.innerWidth, window.innerHeight);\n\t},\n\tfalse,\n);\n"],"file":"_astro/index.astro_astro_type_script_index_0_lang.CegZzA8i.js"}