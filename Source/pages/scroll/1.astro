<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Continuous Drawing Pixelated Text Display</title>
		<style>
			body {
				background-color: #000;
				display: flex;
				justify-content: center;
				align-items: center;
				height: 100vh;
				margin: 0;
			}
			#pixel-canvas {
				image-rendering: pixelated;
			}
		</style>
	</head>
	<body>
		<canvas id="pixel-canvas"></canvas>

		<script>
			class PixelatedDisplay {
				constructor(width = 128, height = 32, text = "") {
					this.canvas = document.getElementById("pixel-canvas");
					this.ctx = this.canvas.getContext("2d");
					this.text = text.toUpperCase();
					this.currentTextIndex = 0;
					this.animationSpeed = 50; // ms per character
					this.resize(width, height);
					this.startAnimation();
				}

				resize(width, height) {
					this.width = width;
					this.height = height;
					this.canvas.width = width;
					this.canvas.height = height;
					this.render();
				}

				setText(text) {
					this.text = text.toUpperCase();
					this.currentTextIndex = 0;
					this.startAnimation();
				}

				render() {
					this.ctx.fillStyle = "#000000";
					this.ctx.fillRect(0, 0, this.width, this.height);

					const pixelSize = Math.floor(this.height / 8);
					const charsPerRow =
						Math.floor(this.width / (pixelSize * 4)) - 1;
					const visibleText = this.text + " ".repeat(charsPerRow);
					const startIndex =
						this.currentTextIndex % visibleText.length;
					const textToRender =
						visibleText.slice(startIndex) +
						visibleText.slice(0, startIndex);
					const textPixels = this.getTextPixels(
						textToRender.slice(0, charsPerRow),
						charsPerRow,
					);

					const startX = pixelSize;
					const startY = Math.floor(
						(this.height - textPixels.length * pixelSize) / 2,
					);

					this.ctx.fillStyle = "#ffffff";
					for (let y = 0; y < textPixels.length; y++) {
						for (let x = 0; x < textPixels[y].length; x++) {
							if (textPixels[y][x]) {
								this.ctx.fillRect(
									startX + x * pixelSize,
									startY + y * pixelSize,
									pixelSize,
									pixelSize,
								);
							}
						}
					}
				}

				getTextPixels(text, maxChars) {
					const characters = {
						"A": [
							[0, 1, 0],
							[1, 0, 1],
							[1, 1, 1],
							[1, 0, 1],
							[1, 0, 1],
						],
						"B": [
							[1, 1, 0],
							[1, 0, 1],
							[1, 1, 0],
							[1, 0, 1],
							[1, 1, 0],
						],
						"C": [
							[0, 1, 1],
							[1, 0, 0],
							[1, 0, 0],
							[1, 0, 0],
							[0, 1, 1],
						],
						"D": [
							[1, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 1, 0],
						],
						"E": [
							[1, 1, 1],
							[1, 0, 0],
							[1, 1, 0],
							[1, 0, 0],
							[1, 1, 1],
						],
						"F": [
							[1, 1, 1],
							[1, 0, 0],
							[1, 1, 0],
							[1, 0, 0],
							[1, 0, 0],
						],
						"G": [
							[0, 1, 1],
							[1, 0, 0],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 1],
						],
						"H": [
							[1, 0, 1],
							[1, 0, 1],
							[1, 1, 1],
							[1, 0, 1],
							[1, 0, 1],
						],
						"I": [
							[1, 1, 1],
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
							[1, 1, 1],
						],
						"J": [
							[0, 0, 1],
							[0, 0, 1],
							[0, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
						],
						"K": [
							[1, 0, 1],
							[1, 1, 0],
							[1, 0, 0],
							[1, 1, 0],
							[1, 0, 1],
						],
						"L": [
							[1, 0, 0],
							[1, 0, 0],
							[1, 0, 0],
							[1, 0, 0],
							[1, 1, 1],
						],
						"M": [
							[1, 0, 1],
							[1, 1, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
						],
						"N": [
							[1, 0, 1],
							[1, 1, 1],
							[1, 1, 1],
							[1, 0, 1],
							[1, 0, 1],
						],
						"O": [
							[0, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
						],
						"P": [
							[1, 1, 0],
							[1, 0, 1],
							[1, 1, 0],
							[1, 0, 0],
							[1, 0, 0],
						],
						"Q": [
							[0, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 1],
						],
						"R": [
							[1, 1, 0],
							[1, 0, 1],
							[1, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
						],
						"S": [
							[0, 1, 1],
							[1, 0, 0],
							[0, 1, 0],
							[0, 0, 1],
							[1, 1, 0],
						],
						"T": [
							[1, 1, 1],
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
						],
						"U": [
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
						],
						"V": [
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
						],
						"W": [
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 1, 1],
							[1, 0, 1],
						],
						"X": [
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
						],
						"Y": [
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
						],
						"Z": [
							[1, 1, 1],
							[0, 0, 1],
							[0, 1, 0],
							[1, 0, 0],
							[1, 1, 1],
						],
						" ": [
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
						],
						"!": [
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
							[0, 0, 0],
							[0, 1, 0],
						],
						".": [
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 1, 0],
						],
						",": [
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 1, 0],
							[1, 0, 0],
						],
					};

					let result = [[], [], [], [], []];
					let charCount = 0;

					for (let char of text) {
						if (charCount >= maxChars) break;
						if (char in characters) {
							for (let i = 0; i < 5; i++) {
								result[i] = result[i].concat(
									characters[char][i],
								);
								result[i].push(0); // Add spacing between letters
							}
							charCount++;
						} else if (char === " ") {
							for (let i = 0; i < 5; i++) {
								result[i] = result[i].concat([0, 0, 0]);
							}
							charCount++;
						}
					}

					return result;
				}

				startAnimation() {
					if (this.animationInterval) {
						clearInterval(this.animationInterval);
					}
					this.animationInterval = setInterval(() => {
						this.currentTextIndex++;
						this.render();
					}, this.animationSpeed);
				}
			}

			// Usage
			const display = new PixelatedDisplay(
				300,
				80,
				"HELLO, WORLD! THIS IS A LONG TEXT THAT WILL CONTINUOUSLY DRAW.",
			);

			// Make it responsive
			window.addEventListener("resize", () => {
				const width = Math.min(window.innerWidth, 800); // Max width of 800px
				const height = Math.floor(width / 4); // Maintain a 4:1 aspect ratio
				display.resize(width, height);
			});

			// Trigger initial resize
			window.dispatchEvent(new Event("resize"));

			// Allow changing the text
			window.changeText = function (newText) {
				display.setText(newText);
			};
		</script>
	</body>
</html>
