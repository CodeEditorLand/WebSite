<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta content="width=device-width, initial-scale=1.0" name="viewport" />
		<title>Animated Pixelated Text Display with Marquee</title>
		<style>
			body {
				background-color: #000;
				display: flex;
				justify-content: center;
				align-items: center;
				height: 100vh;
				margin: 0;
			}

			#pixel-canvas {
				image-rendering: pixelated;
			}
		</style>
	</head>
	<body>
		<canvas id="pixel-canvas"></canvas>

		<script>
			class PixelatedDisplay {
				canvas: HTMLCanvasElement;
				ctx: any;
				text: string;
				currentTextIndex: number;
				animationSpeed: number;
				scrollSpeed: number;
				scrollPosition: number;
				isScrolling: boolean;
				width: any;
				height: any;
				animationInterval: any;
				scrollInterval: any;

				constructor(width = 128, height = 32, text = "") {
					this.canvas =
						document.querySelector<HTMLCanvasElement>(
							"#pixel-canvas",
						) ?? document.createElement("canvas");
					this.ctx = this.canvas?.getContext("2d");
					this.text = text.toUpperCase();
					this.currentTextIndex = 0;
					this.animationSpeed = 100; // ms per character
					this.scrollSpeed = 2; // pixels per frame
					this.scrollPosition = 0;
					this.isScrolling = false;
					this.resize(width, height);
					this.startAnimation();
				}

				resize(width: number, height: number) {
					this.width = width;
					this.height = height;
					this.canvas.width = width;
					this.canvas.height = height;
					this.render();
				}

				setText(text: string) {
					this.text = text.toUpperCase();
					this.currentTextIndex = 0;
					this.scrollPosition = 0;
					this.startAnimation();
				}

				render() {
					this.ctx.fillStyle = "#000000";
					this.ctx.fillRect(0, 0, this.width, this.height);

					const pixelSize = Math.floor(this.height / 8);
					const textPixels = this.getTextPixels(
						this.text.substring(0, this.currentTextIndex),
						Math.floor(this.width / pixelSize),
					);

					let startX = Math.floor(
						(this.width - textPixels.at(0).length * pixelSize) / 2,
					);
					const startY = Math.floor(
						(this.height - textPixels.length * pixelSize) / 2,
					);

					if (this.isScrolling) {
						startX -= this.scrollPosition;
					}

					this.ctx.fillStyle = "#ffffff";
					for (let y = 0; y < textPixels.length; y++) {
						for (let x = 0; x < textPixels[y].length; x++) {
							if (textPixels[y][x]) {
								const pixelX = startX + x * pixelSize;
								if (pixelX >= 0 && pixelX < this.width) {
									this.ctx.fillRect(
										pixelX,
										startY + y * pixelSize,
										pixelSize,
										pixelSize,
									);
								}
							}
						}
					}
				}

				getTextPixels(text, maxWidth) {
					const characters = {
						"A": [
							[0, 1, 0],
							[1, 0, 1],
							[1, 1, 1],
							[1, 0, 1],
							[1, 0, 1],
						],
						"B": [
							[1, 1, 0],
							[1, 0, 1],
							[1, 1, 0],
							[1, 0, 1],
							[1, 1, 0],
						],
						"C": [
							[0, 1, 1],
							[1, 0, 0],
							[1, 0, 0],
							[1, 0, 0],
							[0, 1, 1],
						],
						"D": [
							[1, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 1, 0],
						],
						"E": [
							[1, 1, 1],
							[1, 0, 0],
							[1, 1, 0],
							[1, 0, 0],
							[1, 1, 1],
						],
						"F": [
							[1, 1, 1],
							[1, 0, 0],
							[1, 1, 0],
							[1, 0, 0],
							[1, 0, 0],
						],
						"G": [
							[0, 1, 1],
							[1, 0, 0],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 1],
						],
						"H": [
							[1, 0, 1],
							[1, 0, 1],
							[1, 1, 1],
							[1, 0, 1],
							[1, 0, 1],
						],
						"I": [
							[1, 1, 1],
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
							[1, 1, 1],
						],
						"J": [
							[0, 0, 1],
							[0, 0, 1],
							[0, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
						],
						"K": [
							[1, 0, 1],
							[1, 1, 0],
							[1, 0, 0],
							[1, 1, 0],
							[1, 0, 1],
						],
						"L": [
							[1, 0, 0],
							[1, 0, 0],
							[1, 0, 0],
							[1, 0, 0],
							[1, 1, 1],
						],
						"M": [
							[1, 0, 1],
							[1, 1, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
						],
						"N": [
							[1, 0, 1],
							[1, 1, 1],
							[1, 1, 1],
							[1, 0, 1],
							[1, 0, 1],
						],
						"O": [
							[0, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
						],
						"P": [
							[1, 1, 0],
							[1, 0, 1],
							[1, 1, 0],
							[1, 0, 0],
							[1, 0, 0],
						],
						"Q": [
							[0, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 1],
						],
						"R": [
							[1, 1, 0],
							[1, 0, 1],
							[1, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
						],
						"S": [
							[0, 1, 1],
							[1, 0, 0],
							[0, 1, 0],
							[0, 0, 1],
							[1, 1, 0],
						],
						"T": [
							[1, 1, 1],
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
						],
						"U": [
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
						],
						"V": [
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
						],
						"W": [
							[1, 0, 1],
							[1, 0, 1],
							[1, 0, 1],
							[1, 1, 1],
							[1, 0, 1],
						],
						"X": [
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
							[1, 0, 1],
							[1, 0, 1],
						],
						"Y": [
							[1, 0, 1],
							[1, 0, 1],
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
						],
						"Z": [
							[1, 1, 1],
							[0, 0, 1],
							[0, 1, 0],
							[1, 0, 0],
							[1, 1, 1],
						],
						" ": [
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
						],
						"!": [
							[0, 1, 0],
							[0, 1, 0],
							[0, 1, 0],
							[0, 0, 0],
							[0, 1, 0],
						],
						".": [
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 1, 0],
						],
						",": [
							[0, 0, 0],
							[0, 0, 0],
							[0, 0, 0],
							[0, 1, 0],
							[1, 0, 0],
						],
					};

					let result = [[], [], [], [], []];
					let currentWidth = 0;

					for (let char of text) {
						if (char in characters) {
							for (let i = 0; i < 5; i++) {
								result[i] = result[i].concat(
									characters[char][i],
								);
								result[i].push(0); // Add spacing between letters
							}
							currentWidth += 4;
						} else if (char === " ") {
							for (let i = 0; i < 5; i++) {
								result[i] = result[i].concat([0, 0, 0]);
							}
							currentWidth += 3;
						}
					}

					return result;
				}

				startAnimation() {
					if (this.animationInterval) {
						clearInterval(this.animationInterval);
					}
					this.currentTextIndex = 0;
					this.animationInterval = setInterval(() => {
						if (this.currentTextIndex <= this.text.length) {
							this.render();
							this.currentTextIndex++;
						} else {
							clearInterval(this.animationInterval);
							this.checkForScrolling();
						}
					}, this.animationSpeed);
				}

				checkForScrolling() {
					const pixelSize = Math.floor(this.height / 8);
					const textPixels = this.getTextPixels(
						this.text,
						Number.MAX_SAFE_INTEGER,
					);
					const textWidth = textPixels[0].length * pixelSize;

					if (textWidth > this.width) {
						this.isScrolling = true;
						this.startScrolling();
					}
				}

				startScrolling() {
					if (this.scrollInterval) {
						clearInterval(this.scrollInterval);
					}
					this.scrollInterval = setInterval(() => {
						this.scrollPosition += this.scrollSpeed;
						const pixelSize = Math.floor(this.height / 8);
						const textPixels = this.getTextPixels(
							this.text,
							Number.MAX_SAFE_INTEGER,
						);
						const textWidth = textPixels[0].length * pixelSize;

						if (this.scrollPosition > textWidth) {
							this.scrollPosition = -this.width;
						}
						this.render();
					}, 1000 / 60); // 60 FPS
				}
			}

			// Usage
			const display = new PixelatedDisplay(
				300,
				80,
				"HELLO, WORLD! THIS IS A LONG TEXT THAT WILL SCROLL.",
			);

			// Make it responsive
			window.addEventListener("resize", () => {
				const width = Math.min(window.innerWidth, 800); // Max width of 800px
				const height = Math.floor(width / 4); // Maintain a 4:1 aspect ratio
				display.resize(width, height);
			});

			// Trigger initial resize
			window.dispatchEvent(new Event("resize"));

			// Allow changing the text
			// @ts-expect-error
			window.changeText = function (newText) {
				display.setText(newText);
			};
		</script>
	</body>
</html>
